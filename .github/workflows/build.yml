name: Build minimal ONNX Runtime

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version (e.g., 1.17.3)"
        required: true
      repository:
        description: "Name of a target repository"
        default: 'microsoft/onnxruntime'
        required: false

env:
  ORT_PYTHON_VERSION: '3.10'
  TARGET_LIBRARY: 'onnxruntime'
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version in workflow_dispatch. Recent version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.17.3' }}
  REPOSITORY:
    ${{ github.event.inputs.repository || 'microsoft/onnxruntime' }}

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: onnxruntime-win-x64-minimal
            os: windows-2022
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --cmake_extra_defines CMAKE_SYSTEM_NAME=Windows CMAKE_SYSTEM_PROCESSOR=x86_64 --enable_msvc_static_runtime
            result_dir: build/Release
            release_config: Release
          - artifact_name: onnxruntime-linux-x64-minimal
            os: ubuntu-20.04
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=x86_64
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-linux-armhf-minimal
            os: ubuntu-20.04
            cc_version: "10"
            cxx_version: "10"
            linux_cross_arch: arm-linux-gnueabihf
            symlink_workaround: true
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --arm --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=armv7l
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-linux-arm64-minimal
            os: ubuntu-20.04
            cc_version: "10"
            cxx_version: "10"
            linux_cross_arch: aarch64-linux-gnu
            symlink_workaround: true
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --arm64 --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=aarch64
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-osx-arm64-minimal
            os: macos-13
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --cmake_extra_defines CMAKE_SYSTEM_NAME=Darwin CMAKE_OSX_ARCHITECTURES=arm64
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-osx-x86_64-minimal
            os: macos-13
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --cmake_extra_defines CMAKE_SYSTEM_NAME=Darwin CMAKE_OSX_ARCHITECTURES=x86_64
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-osx-universal2-minimal
            os: macos-13
            build_opts: --minimal_build --disable_ml_ops --enable_reduced_operator_type_support --cmake_extra_defines CMAKE_SYSTEM_NAME=Darwin CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-android-x86_64-minimal
            os: ubuntu-20.04
            build_opts: --minimal_build=extended --use_nnapi --disable_ml_ops --disable_exceptions --disable_rtti --enable_reduced_operator_type_support --android_abi x86_64 --cmake_extra_defines CMAKE_SYSTEM_NAME=Android CMAKE_SYSTEM_PROCESSOR=x86_64 --android
            result_dir: build
            release_config: Release
          - artifact_name: onnxruntime-android-arm64-minimal
            os: ubuntu-20.04
            build_opts: --minimal_build=extended --use_nnapi --disable_ml_ops --disable_exceptions --disable_rtti --enable_reduced_operator_type_support --android_abi arm64-v8a --cmake_extra_defines CMAKE_SYSTEM_NAME=Android CMAKE_SYSTEM_PROCESSOR=aarch64 --android
            result_dir: build
            release_config: Release
    env:
      # prefix usage: "", "arm-linux-gnueabihf-" => "gcc-8", "arm-linux-gnueabihf-gcc-8" (command name)
      # suffix usage: "", "-arm-linux-gnueabihf" => "gcc-8", "gcc-8-arm-linux-gnueabihf" (package name)
      ARCH_PREFIX: "${{ (matrix.linux_cross_arch != '' && matrix.linux_cross_arch) || '' }}${{ (matrix.linux_cross_arch != '' && '-') || '' }}"
      ARCH_SUFFIX: "${{ (matrix.linux_cross_arch != '' && '-') || '' }}${{ (matrix.linux_cross_arch != '' && matrix.linux_cross_arch) || '' }}"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ env.REPOSITORY }}
          ref: v${{ env.ONNXRUNTIME_VERSION }}
          submodules: recursive
          github-server-url: https://github.com

      - name: Checkout builder
        uses: actions/checkout@v4
        with:
          path: builder

      - name: Apply patch
        run: |
          git apply --ignore-whitespace --reject --whitespace=fix --verbose ./builder/1_17_3_android_arm64_build.patch
          git apply --ignore-whitespace --reject --whitespace=fix --verbose ./builder/1_17_3_onnxruntime_cmake.patch

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.ORT_PYTHON_VERSION }}

      - name: Install build dependencies on ubuntu
        if: startsWith(matrix.os, 'ubuntu') && matrix.linux_cross_arch
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              build-essential \
              git \
              wget \
              qemu-user-binfmt \
              gcc-${{ matrix.cc_version }}${{ env.ARCH_SUFFIX }} \
              g++-${{ matrix.cc_version }}${{ env.ARCH_SUFFIX }}

      - name: Install build dependencies on macos
        if: startsWith(matrix.os, 'macos')
        run: |
          pip install --no-cache-dir flatbuffers

      # ONNX Runtime v1.16.1 requires CMake 3.27 or higher.
      - name: Install CMake
        if: startsWith(matrix.os, 'ubuntu')
        env:
          CMAKE_VERSION: 3.27.7
        run: |
          wget -O cmake.sh "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-linux-x86_64.sh"
          sudo bash cmake.sh --skip-license --prefix=/usr/local

      - name: Configure build environment for non-x86_64 Linux
        if: startsWith(matrix.os, 'ubuntu') && matrix.linux_cross_arch
        run: |
          # Required for arm build
          # https://github.com/microsoft/onnxruntime/issues/4189#issuecomment-642528278
          echo 'string(APPEND CMAKE_C_FLAGS " -latomic")' >> cmake/CMakeLists.txt
          echo 'string(APPEND CMAKE_CXX_FLAGS " -latomic")' >> cmake/CMakeLists.txt

          # Prevent Exec Format Error during cross-compiling
          if ${{ matrix.symlink_workaround }}; then
            find /usr/${{ matrix.linux_cross_arch }}/lib -name '*.so*' -exec sudo ln -s {} /usr/lib/${{ matrix.linux_cross_arch }}/ ';'
            sudo ln -s /usr/${{ matrix.linux_cross_arch }}/lib/ld-linux-*.so* /usr/lib/
          fi

          # Set environment variable CC / CXX
          echo CC="$ARCH_PREFIX"gcc-${{ matrix.cc_version }} >> "$GITHUB_ENV"
          echo CXX="$ARCH_PREFIX"g++-${{ matrix.cxx_version }} >> "$GITHUB_ENV"

      - name: Configure to use latest Android NDK
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.artifact_name, 'onnxruntime-android')
        run: |
          # https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2004-Readme.md#environment-variables-2
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> "$GITHUB_ENV"

      - name: Build ONNX Runtime
        run: |
          python ./tools/ci_build/build.py --build_dir ./build ${{ matrix.build_opts }} --config Release --parallel --compile_no_warning_as_error --update --build --build_shared_lib --skip_tests

      - name: Upload map file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-map
          path: "**/onnxruntime.map"
